{"version":3,"sources":["services/contactsServices.js","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-selectors.js","components/contactform/ContactForm.js","redux/phonebook/phonebook-operations.js","components/contactlist/ContactListItem.js","components/contactlist/ContactList.js","components/filter/Filter.js","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["axios","defaults","baseURL","getContactsQuery","a","get","data","addContactQuery","contact","post","deleteContactQuery","id","delete","handleFilter","createAction","getContactRequest","getContactSuccess","getContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","getLoading","state","phonebook","loading","getFilter","filter","getContacts","contacts","getVisibleContacts","createSelector","name","toLowerCase","includes","ContactForm","number","addContact","props","find","person","alert","uuid","clearForm","handleInput","event","setState","target","value","className","onSubmit","e","preventDefault","htmlFor","onChange","this","type","pattern","title","required","Component","connect","dispatch","then","catch","error","ContactListItem","deleteContact","onClick","ContactList","map","item","phonebookSelectors","Filter","App","contactsReducer","createReducer","actions","payload","_","filterReducer","loadingReducer","phonebookReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bfc3c59.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const getContactsQuery = async () => {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n};\r\n\r\nexport const addContactQuery = async contact => {\r\n  await axios.post('/contacts', contact);\r\n};\r\n\r\nexport const deleteContactQuery = async id => {\r\n  await axios.delete('/contacts/' + id);\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const handleFilter = createAction('phonebook/handleFilter');\r\n\r\nexport const getContactRequest = createAction('phonebook/getContactRequest');\r\n\r\nexport const getContactSuccess = createAction('phonebook/getContactSuccess');\r\n\r\nexport const getContactError = createAction('phonebook/getContactError');\r\n\r\nexport const addContactRequest = createAction('phonebook/addContactRequest');\r\n\r\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\r\n\r\nexport const addContactError = createAction('phonebook/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'phonebook/deleteContactRequest',\r\n);\r\n\r\nexport const deleteContactSuccess = createAction(\r\n  'phonebook/deleteContactSuccess',\r\n);\r\n\r\nexport const deleteContactError = createAction('phonebook/deleteContactError');\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.phonebook.loading;\r\n\r\nexport const getFilter = state => state.phonebook.filter;\r\n\r\nexport const getContacts = state => state.phonebook.contacts;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n// import { addContact } from '../../redux/phonebook/phonebook-actions';\r\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { getContacts } from '../../redux/phonebook/phonebook-selectors.js';\r\n\r\nexport class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  addContact = contact => {\r\n    if (this.props.contacts.find(person => person.name === contact.name)) {\r\n      alert(`${contact.name} is already in contacts`);\r\n      return;\r\n    }\r\n    if (this.props.contacts.find(person => person.number === contact.number)) {\r\n      alert(`${contact.number} is already in contacts`);\r\n      return;\r\n    }\r\n    contact.id = uuid();\r\n    this.props.addContact(contact);\r\n    this.clearForm();\r\n  };\r\n\r\n  handleInput = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  clearForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            this.addContact(this.state);\r\n            this.clearForm();\r\n          }}\r\n        >\r\n          <label htmlFor=\"name\" className=\"subtitle\">\r\n            Name\r\n          </label>\r\n          <input\r\n            onChange={this.handleInput}\r\n            value={this.state.name}\r\n            id=\"name\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n          <label htmlFor=\"number\" className=\"subtitle\">\r\n            Number\r\n          </label>\r\n          <input\r\n            onChange={this.handleInput}\r\n            value={this.state.number}\r\n            id=\"number\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n          <button className=\"addContact\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addContact: contact => dispatch(addContact(contact)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\nContactForm.propTypes = { addContact: PropTypes.func };\r\n","import {\r\n  getContactsQuery,\r\n  addContactQuery,\r\n  deleteContactQuery,\r\n} from '../../services/contactsServices';\r\n\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  getContactRequest,\r\n  getContactSuccess,\r\n  getContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './phonebook-actions';\r\n\r\nexport const addContact = contact => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  addContactQuery(contact)\r\n    .then(() => dispatch(addContactSuccess(contact)))\r\n    .catch(error => dispatch(addContactError()));\r\n};\r\n\r\nexport const getContacts = () => dispatch => {\r\n  dispatch(getContactRequest());\r\n\r\n  getContactsQuery()\r\n    .then(data => {\r\n      dispatch(getContactSuccess(data));\r\n    })\r\n    .catch(error => dispatch(getContactError()));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  deleteContactQuery(id)\r\n    .then(data => {\r\n      dispatch(deleteContactSuccess(id));\r\n    })\r\n    .catch(error => dispatch(deleteContactError()));\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/phonebook/phonebook-operations';\r\n\r\nexport class ContactListItem extends Component {\r\n  render() {\r\n    const { name, number, id, deleteContact } = this.props;\r\n    return (\r\n      <li className=\"person\">\r\n        {name} {number}\r\n        <button\r\n          className=\"deleteButton\"\r\n          onClick={() => deleteContact(id)}\r\n          type=\"button\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    deleteContact: id => dispatch(deleteContact(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport ContactListItem from './ContactListItem';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getContacts } from '../../redux/phonebook/phonebook-operations';\r\nimport * as phonebookSelectors from '../../redux/phonebook/phonebook-selectors';\r\n\r\nexport class ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.getContacts();\r\n  }\r\n  render() {\r\n    return this.props.loading ? (\r\n      <div>Loading...</div>\r\n    ) : (\r\n      <ul>\r\n        {this.props.contacts.map(item => (\r\n          <ContactListItem key={item.id} {...item} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: phonebookSelectors.getLoading(state),\r\n    contacts: phonebookSelectors.getVisibleContacts(state),\r\n    // filter: state.phonebook.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getContacts: () => dispatch(getContacts()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  list: PropTypes.arrayOf(PropTypes.object),\r\n  filter: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n};\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleFilter } from '../../redux/phonebook/phonebook-actions';\r\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors';\r\n\r\nexport class Filter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"text\">Find contacts by name</p>\r\n        <input\r\n          value={this.props.filter}\r\n          onChange={this.props.handleFilter}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleFilter: event => dispatch(handleFilter(event.target.value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = { filter: PropTypes.string, handleFilter: PropTypes.func };\r\n","import { Component } from 'react';\r\nimport ContactForm from './components/contactform/ContactForm';\r\nimport ContactList from './components/contactlist/ContactList';\r\nimport Filter from './components/filter/Filter';\r\nimport './styles.scss';\r\n\r\nclass App extends Component {\r\n  // state = {\r\n  //   contacts: [],\r\n  //   filter: '',\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport * as actions from './phonebook-actions';\r\n\r\nexport const contactsReducer = createReducer([], {\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.getContactSuccess]: (_, { payload }) => payload,\r\n  [actions.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nexport const filterReducer = createReducer('', {\r\n  [actions.handleFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport const loadingReducer = createReducer(false, {\r\n  [actions.getContactRequest]: () => true,\r\n  [actions.getContactSuccess]: () => false,\r\n  [actions.getContactError]: () => false,\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false,\r\n});\r\n\r\nconst phonebookReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer,\r\n});\r\nexport default phonebookReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport phonebookReducer from './phonebook/phonebook-reducer';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  // reducer: {\r\n  //   phonebook: persistReducer(persistConfig, phonebookReducer),\r\n  // },\r\n  reducer: {\r\n    phonebook: phonebookReducer,\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const storeWithPersistor = { store, persistor };\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}